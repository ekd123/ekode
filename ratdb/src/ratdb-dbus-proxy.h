/*
 * Generated by gdbus-codegen 2.34.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __RATDB_DBUS_PROXY_H__
#define __RATDB_DBUS_PROXY_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.ratdb.Proxy.Engine */

#define RATDB_TYPE_PROXY_ENGINE (ratdb_proxy_engine_get_type ())
#define RATDB_PROXY_ENGINE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_TYPE_PROXY_ENGINE, RatdbProxyEngine))
#define RATDB_IS_PROXY_ENGINE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_TYPE_PROXY_ENGINE))
#define RATDB_PROXY_ENGINE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), RATDB_TYPE_PROXY_ENGINE, RatdbProxyEngineIface))

struct _RatdbProxyEngine;
typedef struct _RatdbProxyEngine RatdbProxyEngine;
typedef struct _RatdbProxyEngineIface RatdbProxyEngineIface;

struct _RatdbProxyEngineIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_delete_item) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data);

  gboolean (*handle_delete_table) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data);

  gboolean (*handle_extra_data) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_user_data);

  gboolean (*handle_list_tables) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data);

  gboolean (*handle_new_database) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    gint arg_flags,
    const gchar *arg_name,
    const gchar *arg_path,
    const gchar *arg_version,
    const gchar *arg_user_data);

  gboolean (*handle_new_item) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_name,
    const gchar *arg_schema,
    const gchar *const *arg_values,
    const gchar *arg_user_data);

  gboolean (*handle_new_table) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_name,
    const gchar *arg_user_data);

  gboolean (*handle_next) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_user_data);

  gboolean (*handle_prev) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_user_data);

  gboolean (*handle_remove_client) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid);

  gboolean (*handle_request) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_type);

  gboolean (*handle_rewind) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_user_data);

  gboolean (*handle_search) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data);

  gboolean (*handle_select_table) (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data);

};

GType ratdb_proxy_engine_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *ratdb_proxy_engine_interface_info (void);
guint ratdb_proxy_engine_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void ratdb_proxy_engine_complete_request (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *uuid);

void ratdb_proxy_engine_complete_new_database (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation);

void ratdb_proxy_engine_complete_new_table (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation);

void ratdb_proxy_engine_complete_new_item (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation);

void ratdb_proxy_engine_complete_delete_item (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    gint result);

void ratdb_proxy_engine_complete_delete_table (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    gint result);

void ratdb_proxy_engine_complete_list_tables (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *result);

void ratdb_proxy_engine_complete_select_table (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation);

void ratdb_proxy_engine_complete_next (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation);

void ratdb_proxy_engine_complete_prev (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation);

void ratdb_proxy_engine_complete_search (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation);

void ratdb_proxy_engine_complete_rewind (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation);

void ratdb_proxy_engine_complete_extra_data (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation,
    const gchar *result);

void ratdb_proxy_engine_complete_remove_client (
    RatdbProxyEngine *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void ratdb_proxy_engine_call_request (
    RatdbProxyEngine *proxy,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_request_finish (
    RatdbProxyEngine *proxy,
    gchar **out_uuid,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_request_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_type,
    gchar **out_uuid,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_new_database (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    gint arg_flags,
    const gchar *arg_name,
    const gchar *arg_path,
    const gchar *arg_version,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_new_database_finish (
    RatdbProxyEngine *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_new_database_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    gint arg_flags,
    const gchar *arg_name,
    const gchar *arg_path,
    const gchar *arg_version,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_new_table (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_name,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_new_table_finish (
    RatdbProxyEngine *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_new_table_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_name,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_new_item (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_name,
    const gchar *arg_schema,
    const gchar *const *arg_values,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_new_item_finish (
    RatdbProxyEngine *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_new_item_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_name,
    const gchar *arg_schema,
    const gchar *const *arg_values,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_delete_item (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_delete_item_finish (
    RatdbProxyEngine *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_delete_item_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_delete_table (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_delete_table_finish (
    RatdbProxyEngine *proxy,
    gint *out_result,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_delete_table_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    gint *out_result,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_list_tables (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_list_tables_finish (
    RatdbProxyEngine *proxy,
    gchar ***out_result,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_list_tables_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    gchar ***out_result,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_select_table (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_select_table_finish (
    RatdbProxyEngine *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_select_table_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_next (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_next_finish (
    RatdbProxyEngine *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_next_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_prev (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_prev_finish (
    RatdbProxyEngine *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_prev_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_search (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_search_finish (
    RatdbProxyEngine *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_search_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_condition,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_rewind (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_rewind_finish (
    RatdbProxyEngine *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_rewind_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_extra_data (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_user_data,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_extra_data_finish (
    RatdbProxyEngine *proxy,
    gchar **out_result,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_extra_data_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    const gchar *arg_user_data,
    gchar **out_result,
    GCancellable *cancellable,
    GError **error);

void ratdb_proxy_engine_call_remove_client (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_proxy_engine_call_remove_client_finish (
    RatdbProxyEngine *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_proxy_engine_call_remove_client_sync (
    RatdbProxyEngine *proxy,
    const gchar *arg_uuid,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define RATDB_TYPE_PROXY_ENGINE_PROXY (ratdb_proxy_engine_proxy_get_type ())
#define RATDB_PROXY_ENGINE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_TYPE_PROXY_ENGINE_PROXY, RatdbProxyEngineProxy))
#define RATDB_PROXY_ENGINE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), RATDB_TYPE_PROXY_ENGINE_PROXY, RatdbProxyEngineProxyClass))
#define RATDB_PROXY_ENGINE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), RATDB_TYPE_PROXY_ENGINE_PROXY, RatdbProxyEngineProxyClass))
#define RATDB_IS_PROXY_ENGINE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_TYPE_PROXY_ENGINE_PROXY))
#define RATDB_IS_PROXY_ENGINE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), RATDB_TYPE_PROXY_ENGINE_PROXY))

typedef struct _RatdbProxyEngineProxy RatdbProxyEngineProxy;
typedef struct _RatdbProxyEngineProxyClass RatdbProxyEngineProxyClass;
typedef struct _RatdbProxyEngineProxyPrivate RatdbProxyEngineProxyPrivate;

struct _RatdbProxyEngineProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RatdbProxyEngineProxyPrivate *priv;
};

struct _RatdbProxyEngineProxyClass
{
  GDBusProxyClass parent_class;
};

GType ratdb_proxy_engine_proxy_get_type (void) G_GNUC_CONST;

void ratdb_proxy_engine_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RatdbProxyEngine *ratdb_proxy_engine_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RatdbProxyEngine *ratdb_proxy_engine_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void ratdb_proxy_engine_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RatdbProxyEngine *ratdb_proxy_engine_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RatdbProxyEngine *ratdb_proxy_engine_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define RATDB_TYPE_PROXY_ENGINE_SKELETON (ratdb_proxy_engine_skeleton_get_type ())
#define RATDB_PROXY_ENGINE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_TYPE_PROXY_ENGINE_SKELETON, RatdbProxyEngineSkeleton))
#define RATDB_PROXY_ENGINE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), RATDB_TYPE_PROXY_ENGINE_SKELETON, RatdbProxyEngineSkeletonClass))
#define RATDB_PROXY_ENGINE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), RATDB_TYPE_PROXY_ENGINE_SKELETON, RatdbProxyEngineSkeletonClass))
#define RATDB_IS_PROXY_ENGINE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_TYPE_PROXY_ENGINE_SKELETON))
#define RATDB_IS_PROXY_ENGINE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), RATDB_TYPE_PROXY_ENGINE_SKELETON))

typedef struct _RatdbProxyEngineSkeleton RatdbProxyEngineSkeleton;
typedef struct _RatdbProxyEngineSkeletonClass RatdbProxyEngineSkeletonClass;
typedef struct _RatdbProxyEngineSkeletonPrivate RatdbProxyEngineSkeletonPrivate;

struct _RatdbProxyEngineSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RatdbProxyEngineSkeletonPrivate *priv;
};

struct _RatdbProxyEngineSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType ratdb_proxy_engine_skeleton_get_type (void) G_GNUC_CONST;

RatdbProxyEngine *ratdb_proxy_engine_skeleton_new (void);


G_END_DECLS

#endif /* __RATDB_DBUS_PROXY_H__ */
