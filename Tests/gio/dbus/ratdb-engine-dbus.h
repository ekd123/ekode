/*
 * Generated by gdbus-codegen 2.34.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __RATDB_ENGINE_DBUS_H__
#define __RATDB_ENGINE_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.ratdb.Engine.Interface */

#define RATDB_DBUS_TYPE_INTERFACE (ratdb_dbus_interface_get_type ())
#define RATDB_DBUS_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_DBUS_TYPE_INTERFACE, RatdbDbusInterface))
#define RATDB_DBUS_IS_INTERFACE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_DBUS_TYPE_INTERFACE))
#define RATDB_DBUS_INTERFACE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), RATDB_DBUS_TYPE_INTERFACE, RatdbDbusInterfaceIface))

struct _RatdbDbusInterface;
typedef struct _RatdbDbusInterface RatdbDbusInterface;
typedef struct _RatdbDbusInterfaceIface RatdbDbusInterfaceIface;

struct _RatdbDbusInterfaceIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_request) (
    RatdbDbusInterface *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_type);

};

GType ratdb_dbus_interface_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *ratdb_dbus_interface_interface_info (void);
guint ratdb_dbus_interface_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void ratdb_dbus_interface_complete_request (
    RatdbDbusInterface *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void ratdb_dbus_interface_call_request (
    RatdbDbusInterface *proxy,
    const gchar *arg_type,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean ratdb_dbus_interface_call_request_finish (
    RatdbDbusInterface *proxy,
    GAsyncResult *res,
    GError **error);

gboolean ratdb_dbus_interface_call_request_sync (
    RatdbDbusInterface *proxy,
    const gchar *arg_type,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define RATDB_DBUS_TYPE_INTERFACE_PROXY (ratdb_dbus_interface_proxy_get_type ())
#define RATDB_DBUS_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_DBUS_TYPE_INTERFACE_PROXY, RatdbDbusInterfaceProxy))
#define RATDB_DBUS_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), RATDB_DBUS_TYPE_INTERFACE_PROXY, RatdbDbusInterfaceProxyClass))
#define RATDB_DBUS_INTERFACE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), RATDB_DBUS_TYPE_INTERFACE_PROXY, RatdbDbusInterfaceProxyClass))
#define RATDB_DBUS_IS_INTERFACE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_DBUS_TYPE_INTERFACE_PROXY))
#define RATDB_DBUS_IS_INTERFACE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), RATDB_DBUS_TYPE_INTERFACE_PROXY))

typedef struct _RatdbDbusInterfaceProxy RatdbDbusInterfaceProxy;
typedef struct _RatdbDbusInterfaceProxyClass RatdbDbusInterfaceProxyClass;
typedef struct _RatdbDbusInterfaceProxyPrivate RatdbDbusInterfaceProxyPrivate;

struct _RatdbDbusInterfaceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  RatdbDbusInterfaceProxyPrivate *priv;
};

struct _RatdbDbusInterfaceProxyClass
{
  GDBusProxyClass parent_class;
};

GType ratdb_dbus_interface_proxy_get_type (void) G_GNUC_CONST;

void ratdb_dbus_interface_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RatdbDbusInterface *ratdb_dbus_interface_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
RatdbDbusInterface *ratdb_dbus_interface_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void ratdb_dbus_interface_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
RatdbDbusInterface *ratdb_dbus_interface_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
RatdbDbusInterface *ratdb_dbus_interface_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define RATDB_DBUS_TYPE_INTERFACE_SKELETON (ratdb_dbus_interface_skeleton_get_type ())
#define RATDB_DBUS_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_DBUS_TYPE_INTERFACE_SKELETON, RatdbDbusInterfaceSkeleton))
#define RATDB_DBUS_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), RATDB_DBUS_TYPE_INTERFACE_SKELETON, RatdbDbusInterfaceSkeletonClass))
#define RATDB_DBUS_INTERFACE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), RATDB_DBUS_TYPE_INTERFACE_SKELETON, RatdbDbusInterfaceSkeletonClass))
#define RATDB_DBUS_IS_INTERFACE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_DBUS_TYPE_INTERFACE_SKELETON))
#define RATDB_DBUS_IS_INTERFACE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), RATDB_DBUS_TYPE_INTERFACE_SKELETON))

typedef struct _RatdbDbusInterfaceSkeleton RatdbDbusInterfaceSkeleton;
typedef struct _RatdbDbusInterfaceSkeletonClass RatdbDbusInterfaceSkeletonClass;
typedef struct _RatdbDbusInterfaceSkeletonPrivate RatdbDbusInterfaceSkeletonPrivate;

struct _RatdbDbusInterfaceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  RatdbDbusInterfaceSkeletonPrivate *priv;
};

struct _RatdbDbusInterfaceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType ratdb_dbus_interface_skeleton_get_type (void) G_GNUC_CONST;

RatdbDbusInterface *ratdb_dbus_interface_skeleton_new (void);


/* ---- */

#define RATDB_DBUS_TYPE_OBJECT (ratdb_dbus_object_get_type ())
#define RATDB_DBUS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_DBUS_TYPE_OBJECT, RatdbDbusObject))
#define RATDB_DBUS_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_DBUS_TYPE_OBJECT))
#define RATDB_DBUS_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), RATDB_DBUS_TYPE_OBJECT, RatdbDbusObject))

struct _RatdbDbusObject;
typedef struct _RatdbDbusObject RatdbDbusObject;
typedef struct _RatdbDbusObjectIface RatdbDbusObjectIface;

struct _RatdbDbusObjectIface
{
  GTypeInterface parent_iface;
};

GType ratdb_dbus_object_get_type (void) G_GNUC_CONST;

RatdbDbusInterface *ratdb_dbus_object_get_interface (RatdbDbusObject *object);
RatdbDbusInterface *ratdb_dbus_object_peek_interface (RatdbDbusObject *object);

#define RATDB_DBUS_TYPE_OBJECT_PROXY (ratdb_dbus_object_proxy_get_type ())
#define RATDB_DBUS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_DBUS_TYPE_OBJECT_PROXY, RatdbDbusObjectProxy))
#define RATDB_DBUS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), RATDB_DBUS_TYPE_OBJECT_PROXY, RatdbDbusObjectProxyClass))
#define RATDB_DBUS_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), RATDB_DBUS_TYPE_OBJECT_PROXY, RatdbDbusObjectProxyClass))
#define RATDB_DBUS_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_DBUS_TYPE_OBJECT_PROXY))
#define RATDB_DBUS_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), RATDB_DBUS_TYPE_OBJECT_PROXY))

typedef struct _RatdbDbusObjectProxy RatdbDbusObjectProxy;
typedef struct _RatdbDbusObjectProxyClass RatdbDbusObjectProxyClass;
typedef struct _RatdbDbusObjectProxyPrivate RatdbDbusObjectProxyPrivate;

struct _RatdbDbusObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  RatdbDbusObjectProxyPrivate *priv;
};

struct _RatdbDbusObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType ratdb_dbus_object_proxy_get_type (void) G_GNUC_CONST;
RatdbDbusObjectProxy *ratdb_dbus_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define RATDB_DBUS_TYPE_OBJECT_SKELETON (ratdb_dbus_object_skeleton_get_type ())
#define RATDB_DBUS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_DBUS_TYPE_OBJECT_SKELETON, RatdbDbusObjectSkeleton))
#define RATDB_DBUS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), RATDB_DBUS_TYPE_OBJECT_SKELETON, RatdbDbusObjectSkeletonClass))
#define RATDB_DBUS_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), RATDB_DBUS_TYPE_OBJECT_SKELETON, RatdbDbusObjectSkeletonClass))
#define RATDB_DBUS_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_DBUS_TYPE_OBJECT_SKELETON))
#define RATDB_DBUS_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), RATDB_DBUS_TYPE_OBJECT_SKELETON))

typedef struct _RatdbDbusObjectSkeleton RatdbDbusObjectSkeleton;
typedef struct _RatdbDbusObjectSkeletonClass RatdbDbusObjectSkeletonClass;
typedef struct _RatdbDbusObjectSkeletonPrivate RatdbDbusObjectSkeletonPrivate;

struct _RatdbDbusObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  RatdbDbusObjectSkeletonPrivate *priv;
};

struct _RatdbDbusObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType ratdb_dbus_object_skeleton_get_type (void) G_GNUC_CONST;
RatdbDbusObjectSkeleton *ratdb_dbus_object_skeleton_new (const gchar *object_path);
void ratdb_dbus_object_skeleton_set_interface (RatdbDbusObjectSkeleton *object, RatdbDbusInterface *interface_);

/* ---- */

#define RATDB_DBUS_TYPE_OBJECT_MANAGER_CLIENT (ratdb_dbus_object_manager_client_get_type ())
#define RATDB_DBUS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), RATDB_DBUS_TYPE_OBJECT_MANAGER_CLIENT, RatdbDbusObjectManagerClient))
#define RATDB_DBUS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), RATDB_DBUS_TYPE_OBJECT_MANAGER_CLIENT, RatdbDbusObjectManagerClientClass))
#define RATDB_DBUS_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), RATDB_DBUS_TYPE_OBJECT_MANAGER_CLIENT, RatdbDbusObjectManagerClientClass))
#define RATDB_DBUS_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), RATDB_DBUS_TYPE_OBJECT_MANAGER_CLIENT))
#define RATDB_DBUS_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), RATDB_DBUS_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _RatdbDbusObjectManagerClient RatdbDbusObjectManagerClient;
typedef struct _RatdbDbusObjectManagerClientClass RatdbDbusObjectManagerClientClass;
typedef struct _RatdbDbusObjectManagerClientPrivate RatdbDbusObjectManagerClientPrivate;

struct _RatdbDbusObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  RatdbDbusObjectManagerClientPrivate *priv;
};

struct _RatdbDbusObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType ratdb_dbus_object_manager_client_get_type (void) G_GNUC_CONST;

GType ratdb_dbus_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void ratdb_dbus_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *ratdb_dbus_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *ratdb_dbus_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void ratdb_dbus_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *ratdb_dbus_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *ratdb_dbus_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __RATDB_ENGINE_DBUS_H__ */
