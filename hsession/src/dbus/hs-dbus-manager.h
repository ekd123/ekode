/*
 * Generated by gdbus-codegen 2.32.4. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __HS_DBUS_MANAGER_H__
#define __HS_DBUS_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.home.hsession.Manager.Power */

#define HS_TYPE_POWER (hs_power_get_type ())
#define HS_POWER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_POWER, HsPower))
#define HS_IS_POWER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_POWER))
#define HS_POWER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), HS_TYPE_POWER, HsPowerIface))

struct _HsPower;
typedef struct _HsPower HsPower;
typedef struct _HsPowerIface HsPowerIface;

struct _HsPowerIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_halt) (
    HsPower *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_hibernate) (
    HsPower *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_restart) (
    HsPower *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_suspend) (
    HsPower *object,
    GDBusMethodInvocation *invocation);

};

GType hs_power_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *hs_power_interface_info (void);
guint hs_power_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void hs_power_complete_halt (
    HsPower *object,
    GDBusMethodInvocation *invocation);

void hs_power_complete_restart (
    HsPower *object,
    GDBusMethodInvocation *invocation);

void hs_power_complete_suspend (
    HsPower *object,
    GDBusMethodInvocation *invocation);

void hs_power_complete_hibernate (
    HsPower *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void hs_power_call_halt (
    HsPower *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hs_power_call_halt_finish (
    HsPower *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hs_power_call_halt_sync (
    HsPower *proxy,
    GCancellable *cancellable,
    GError **error);

void hs_power_call_restart (
    HsPower *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hs_power_call_restart_finish (
    HsPower *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hs_power_call_restart_sync (
    HsPower *proxy,
    GCancellable *cancellable,
    GError **error);

void hs_power_call_suspend (
    HsPower *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hs_power_call_suspend_finish (
    HsPower *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hs_power_call_suspend_sync (
    HsPower *proxy,
    GCancellable *cancellable,
    GError **error);

void hs_power_call_hibernate (
    HsPower *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hs_power_call_hibernate_finish (
    HsPower *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hs_power_call_hibernate_sync (
    HsPower *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define HS_TYPE_POWER_PROXY (hs_power_proxy_get_type ())
#define HS_POWER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_POWER_PROXY, HsPowerProxy))
#define HS_POWER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HS_TYPE_POWER_PROXY, HsPowerProxyClass))
#define HS_POWER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HS_TYPE_POWER_PROXY, HsPowerProxyClass))
#define HS_IS_POWER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_POWER_PROXY))
#define HS_IS_POWER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HS_TYPE_POWER_PROXY))

typedef struct _HsPowerProxy HsPowerProxy;
typedef struct _HsPowerProxyClass HsPowerProxyClass;
typedef struct _HsPowerProxyPrivate HsPowerProxyPrivate;

struct _HsPowerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  HsPowerProxyPrivate *priv;
};

struct _HsPowerProxyClass
{
  GDBusProxyClass parent_class;
};

GType hs_power_proxy_get_type (void) G_GNUC_CONST;

void hs_power_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
HsPower *hs_power_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
HsPower *hs_power_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void hs_power_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
HsPower *hs_power_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
HsPower *hs_power_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define HS_TYPE_POWER_SKELETON (hs_power_skeleton_get_type ())
#define HS_POWER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_POWER_SKELETON, HsPowerSkeleton))
#define HS_POWER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HS_TYPE_POWER_SKELETON, HsPowerSkeletonClass))
#define HS_POWER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HS_TYPE_POWER_SKELETON, HsPowerSkeletonClass))
#define HS_IS_POWER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_POWER_SKELETON))
#define HS_IS_POWER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HS_TYPE_POWER_SKELETON))

typedef struct _HsPowerSkeleton HsPowerSkeleton;
typedef struct _HsPowerSkeletonClass HsPowerSkeletonClass;
typedef struct _HsPowerSkeletonPrivate HsPowerSkeletonPrivate;

struct _HsPowerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  HsPowerSkeletonPrivate *priv;
};

struct _HsPowerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType hs_power_skeleton_get_type (void) G_GNUC_CONST;

HsPower *hs_power_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.home.hsession.Manager.Session */

#define HS_TYPE_SESSION (hs_session_get_type ())
#define HS_SESSION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_SESSION, HsSession))
#define HS_IS_SESSION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_SESSION))
#define HS_SESSION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), HS_TYPE_SESSION, HsSessionIface))

struct _HsSession;
typedef struct _HsSession HsSession;
typedef struct _HsSessionIface HsSessionIface;

struct _HsSessionIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_logout) (
    HsSession *object,
    GDBusMethodInvocation *invocation);

};

GType hs_session_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *hs_session_interface_info (void);
guint hs_session_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void hs_session_complete_logout (
    HsSession *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void hs_session_call_logout (
    HsSession *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hs_session_call_logout_finish (
    HsSession *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hs_session_call_logout_sync (
    HsSession *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define HS_TYPE_SESSION_PROXY (hs_session_proxy_get_type ())
#define HS_SESSION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_SESSION_PROXY, HsSessionProxy))
#define HS_SESSION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HS_TYPE_SESSION_PROXY, HsSessionProxyClass))
#define HS_SESSION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HS_TYPE_SESSION_PROXY, HsSessionProxyClass))
#define HS_IS_SESSION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_SESSION_PROXY))
#define HS_IS_SESSION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HS_TYPE_SESSION_PROXY))

typedef struct _HsSessionProxy HsSessionProxy;
typedef struct _HsSessionProxyClass HsSessionProxyClass;
typedef struct _HsSessionProxyPrivate HsSessionProxyPrivate;

struct _HsSessionProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  HsSessionProxyPrivate *priv;
};

struct _HsSessionProxyClass
{
  GDBusProxyClass parent_class;
};

GType hs_session_proxy_get_type (void) G_GNUC_CONST;

void hs_session_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
HsSession *hs_session_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
HsSession *hs_session_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void hs_session_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
HsSession *hs_session_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
HsSession *hs_session_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define HS_TYPE_SESSION_SKELETON (hs_session_skeleton_get_type ())
#define HS_SESSION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_SESSION_SKELETON, HsSessionSkeleton))
#define HS_SESSION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HS_TYPE_SESSION_SKELETON, HsSessionSkeletonClass))
#define HS_SESSION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HS_TYPE_SESSION_SKELETON, HsSessionSkeletonClass))
#define HS_IS_SESSION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_SESSION_SKELETON))
#define HS_IS_SESSION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HS_TYPE_SESSION_SKELETON))

typedef struct _HsSessionSkeleton HsSessionSkeleton;
typedef struct _HsSessionSkeletonClass HsSessionSkeletonClass;
typedef struct _HsSessionSkeletonPrivate HsSessionSkeletonPrivate;

struct _HsSessionSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  HsSessionSkeletonPrivate *priv;
};

struct _HsSessionSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType hs_session_skeleton_get_type (void) G_GNUC_CONST;

HsSession *hs_session_skeleton_new (void);


/* ---- */

#define HS_TYPE_OBJECT (hs_object_get_type ())
#define HS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_OBJECT, HsObject))
#define HS_IS_OBJECT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_OBJECT))
#define HS_OBJECT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), HS_TYPE_OBJECT, HsObject))

struct _HsObject;
typedef struct _HsObject HsObject;
typedef struct _HsObjectIface HsObjectIface;

struct _HsObjectIface
{
  GTypeInterface parent_iface;
};

GType hs_object_get_type (void) G_GNUC_CONST;

HsPower *hs_object_get_power (HsObject *object);
HsSession *hs_object_get_session (HsObject *object);
HsPower *hs_object_peek_power (HsObject *object);
HsSession *hs_object_peek_session (HsObject *object);

#define HS_TYPE_OBJECT_PROXY (hs_object_proxy_get_type ())
#define HS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_OBJECT_PROXY, HsObjectProxy))
#define HS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HS_TYPE_OBJECT_PROXY, HsObjectProxyClass))
#define HS_OBJECT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HS_TYPE_OBJECT_PROXY, HsObjectProxyClass))
#define HS_IS_OBJECT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_OBJECT_PROXY))
#define HS_IS_OBJECT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HS_TYPE_OBJECT_PROXY))

typedef struct _HsObjectProxy HsObjectProxy;
typedef struct _HsObjectProxyClass HsObjectProxyClass;
typedef struct _HsObjectProxyPrivate HsObjectProxyPrivate;

struct _HsObjectProxy
{
  /*< private >*/
  GDBusObjectProxy parent_instance;
  HsObjectProxyPrivate *priv;
};

struct _HsObjectProxyClass
{
  GDBusObjectProxyClass parent_class;
};

GType hs_object_proxy_get_type (void) G_GNUC_CONST;
HsObjectProxy *hs_object_proxy_new (GDBusConnection *connection, const gchar *object_path);

#define HS_TYPE_OBJECT_SKELETON (hs_object_skeleton_get_type ())
#define HS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_OBJECT_SKELETON, HsObjectSkeleton))
#define HS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HS_TYPE_OBJECT_SKELETON, HsObjectSkeletonClass))
#define HS_OBJECT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HS_TYPE_OBJECT_SKELETON, HsObjectSkeletonClass))
#define HS_IS_OBJECT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_OBJECT_SKELETON))
#define HS_IS_OBJECT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HS_TYPE_OBJECT_SKELETON))

typedef struct _HsObjectSkeleton HsObjectSkeleton;
typedef struct _HsObjectSkeletonClass HsObjectSkeletonClass;
typedef struct _HsObjectSkeletonPrivate HsObjectSkeletonPrivate;

struct _HsObjectSkeleton
{
  /*< private >*/
  GDBusObjectSkeleton parent_instance;
  HsObjectSkeletonPrivate *priv;
};

struct _HsObjectSkeletonClass
{
  GDBusObjectSkeletonClass parent_class;
};

GType hs_object_skeleton_get_type (void) G_GNUC_CONST;
HsObjectSkeleton *hs_object_skeleton_new (const gchar *object_path);
void hs_object_skeleton_set_power (HsObjectSkeleton *object, HsPower *interface_);
void hs_object_skeleton_set_session (HsObjectSkeleton *object, HsSession *interface_);

/* ---- */

#define HS_TYPE_OBJECT_MANAGER_CLIENT (hs_object_manager_client_get_type ())
#define HS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HS_TYPE_OBJECT_MANAGER_CLIENT, HsObjectManagerClient))
#define HS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HS_TYPE_OBJECT_MANAGER_CLIENT, HsObjectManagerClientClass))
#define HS_OBJECT_MANAGER_CLIENT_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HS_TYPE_OBJECT_MANAGER_CLIENT, HsObjectManagerClientClass))
#define HS_IS_OBJECT_MANAGER_CLIENT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HS_TYPE_OBJECT_MANAGER_CLIENT))
#define HS_IS_OBJECT_MANAGER_CLIENT_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HS_TYPE_OBJECT_MANAGER_CLIENT))

typedef struct _HsObjectManagerClient HsObjectManagerClient;
typedef struct _HsObjectManagerClientClass HsObjectManagerClientClass;
typedef struct _HsObjectManagerClientPrivate HsObjectManagerClientPrivate;

struct _HsObjectManagerClient
{
  /*< private >*/
  GDBusObjectManagerClient parent_instance;
  HsObjectManagerClientPrivate *priv;
};

struct _HsObjectManagerClientClass
{
  GDBusObjectManagerClientClass parent_class;
};

GType hs_object_manager_client_get_type (void) G_GNUC_CONST;

GType hs_object_manager_client_get_proxy_type (GDBusObjectManagerClient *manager, const gchar *object_path, const gchar *interface_name, gpointer user_data);

void hs_object_manager_client_new (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *hs_object_manager_client_new_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *hs_object_manager_client_new_sync (
    GDBusConnection        *connection,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);

void hs_object_manager_client_new_for_bus (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GAsyncReadyCallback     callback,
    gpointer                user_data);
GDBusObjectManager *hs_object_manager_client_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GDBusObjectManager *hs_object_manager_client_new_for_bus_sync (
    GBusType                bus_type,
    GDBusObjectManagerClientFlags  flags,
    const gchar            *name,
    const gchar            *object_path,
    GCancellable           *cancellable,
    GError                **error);


G_END_DECLS

#endif /* __HS_DBUS_MANAGER_H__ */
